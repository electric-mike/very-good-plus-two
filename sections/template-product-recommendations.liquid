{% comment %} Max amount of products visible {% endcomment %}
{% assign limit = section.settings.product_limit %}

{% comment %} Shopify generated dynamic recommendations, falling back to default related products (based on parent collection) {% endcomment %}
{% assign products = recommendations.products %}

<div class="product-list-wrapper product-recommendations" data-product-id="{{ product.id }}" data-limit="{{ limit }}">
  <div class="max-width">
    <div class="title center-text">
      <h3>{{ section.settings.header_text }}</h3>
      <br>
    </div>
    <div
      id="recommendations"
      class="recommendations product-list row"
      data-swatches-wrapper
      data-swatches-ajax="true"
    >
      {% assign count = 0 %}
      {%- for prod in products -%}
        {%- if prod.vendor != 'Route' and count < 4 -%}
          {%- assign count = count | plus: 1 -%}
          <div class="product product-{{ prod.id }} column-6-tablet-vert-{{ 12 | divided_by: limit }}">
            <a class="product-image-wrapper" href="{{ prod.url | within: collection }}" title="{{ prod.title }}">
              <div class="image-wrap" style="height: 0; padding-bottom: {{ 100 | divided_by: prod.featured_image.aspect_ratio }}%;">
                {%- assign img_url = prod.featured_image.src | img_url: '1x1' | replace: '_1x1.', '_{width}x.' -%}
                {%- assign secondary_img_url = prod.images[1].src | img_url: '1x1' | replace: '_1x1.', '_{width}x.' -%}
                <img
                  class="product-image lazyload blur-up"
                  src="{{ settings.placeholder_image | img_url }}"
                  alt="{{ prod.title | escape }}"
                  data-src="{{ img_url }}"
                  data-widths="[360, 540, 720, 900, 1080, 1600]"
                  data-aspectratio="{{ prod.featured_image.aspect_ratio }}"
                  data-secondary-aspectratio="{{ prod.images[1].aspect_ratio }}"
                  data-sizes="auto"
                  data-first-src="{{ img_url }}"
                  data-additional-image="{{ secondary_img_url }}"
                  v-on:mouseover="changeImage('in', $event)"
                  v-on:mouseleave="changeImage('out', $event)"
                  width="{{ prod.featured_image.width }}"
                  height="{{ prod.featured_image.height }}"
                  loading="lazy"
                />
                <noscript>
                  <img class="lazyloaded" src="{{ prod.featured_image.src | img_url: '800x' }}" alt="{{ prod.title | escape }}">
                </noscript>
              </div>
            </a>
            <div class="product-info">
              <p>{{ prod.vendor }}</p>
              <a href="{{ prod.url | within: collection }}" title="{{ prod.title }}">
                <p>{{ prod.title }}</p>
              </a>
              {%- if prod.compare_at_price > prod.price %}<p class="original-price">{{ prod.compare_at_price | money_without_trailing_zeros }}</p>{%- endif -%}
              <p class="price">{{ prod.price | money_without_trailing_zeros }}</p>
            </div>
            {% include 'color-swatches', product: prod %}
          </div>
        {%- endif -%}
      {%- endfor -%}
    </div>
  </div>
</div>

{% assign bestSellers = collections['all'].products | sort: 'best-sellers' %}

<script>
  function loadProductRecommendations() {
    var productRecommendationsWrapper = document.querySelector('.product-recommendations-wrapper');
    var dynamicProductRecommendationSection = document.querySelector('.product-recommendations');
    var productId = dynamicProductRecommendationSection.dataset.productId || "{{ bestSellers.first.id }}"; //@todo make an option in section
    var limit = dynamicProductRecommendationSection.dataset.limit;

    var request = new XMLHttpRequest();
    request.open('GET', '{{ routes.product_recommendations_url }}?section_id={{ section.id }}&limit='+(limit+1)+'&product_id='+productId, true);

    request.onload = function() {
      if (this.status >= 200 && this.status < 400) {
        var dataHTML = document.createElement('div');
        dataHTML.innerHTML = this.response.trim();
        var recommendedProductsResponseInner = dataHTML.querySelector('.product-recommendations .recommendations');

        if(recommendedProductsResponseInner.querySelectorAll('.product').length > 0) {
          var recommendationsWrapper = document.getElementById('recommendations');
          recommendationsWrapper.innerHTML = recommendedProductsResponseInner.innerHTML;

          {% if section.settings.enable_scrollbar %}
          if(window.SimpleBar) {
            new SimpleBar(recommendationsWrapper);

            var doRecSwatchEvent = new CustomEvent('doSwatchesFromAjax');
            window.dispatchEvent(doRecSwatchEvent);
          } else {
            window.addEventListener('load', function() {
              new SimpleBar(recommendationsWrapper);

              var doRecSwatchEvent = new CustomEvent('doSwatchesFromAjax');
              window.dispatchEvent(doRecSwatchEvent);
            });
          }
          {% endif %}
        } else {
          productRecommendationsWrapper.style.display = 'none';
        }

      } else {
        productRecommendationsWrapper.style.display = 'none';
      }
    };

    request.onerror = function() {
      productRecommendationsWrapper.style.display = 'none';
    };

    request.send();
  }

  loadProductRecommendations();
</script>

<style>
  #recommendations .simplebar-scrollbar {
    background-color: var(--shop-primary-color);
  }
</style>

{% schema %}
{
  "name": "Product Recommendations",
  "class": "product-recommendations-wrapper",
  "settings": [
    {
      "type": "range",
      "id": "product_limit",
      "label": "Product Limit",
      "min": 1,
      "max": 12,
      "step": 1,
      "default": 4
    },
    {
      "type": "text",
      "id": "header_text",
      "label": "Header Text",
      "default": "Related Products"
    },
    {
      "type": "checkbox",
      "id": "enable_scrollbar",
      "label": "Enable Scrollbar",
      "default": false
    }
  ]
}
{% endschema %}
